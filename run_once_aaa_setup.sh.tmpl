#!/usr/bin/env bash

{{- /* Completely disable this script in Codespaces and CI for now */}}
{{- if (and (not .codespaces) (not .ci)) }}

# IMPORTANT: This file must be idempotent because we don't know when/if it'll
# be re-run.

{{- /* Use for doing different things on different machines

{{- if .codespaces }}
# Setup for codespaces
{{- else if (eq .chezmoi.os "darwin") }}
# Setup for MacOS
{{- else if (eq .chezmoi.os "linux") }}
# Setup for linux
{{- end }}

*/}}

{{- /* Use for doing different things on different machines

{{- if (or (.codespaces) (eq .chezmoi.os "linux")) }}
# Setup for Linux or codespaces
{{- else if (eq .chezmoi.os "darwin") }}
# Setup for MacOS
{{- end }}

*/}}

# toolchain setup
{{- if (eq .chezmoi.os "darwin") }}
xcode-select --install
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install wget git findutils coreutils parallel
{{- else if (eq .chezmoi.os "linux") }}
# Setup for linux
# update git
sudo add-apt-repository ppa:git-core/ppa
sudo apt update
sudo apt install git parallel
{{- end }}

# Some prep for ZSH
mkdir -p $HOME/.zsh
mkdir -p /usr/local/bin

# 1password CLI
{{- if (eq .chezmoi.os "darwin") }}
wget https://cache.agilebits.com/dist/1P/op/pkg/v1.9.1/op_darwin_amd64_v1.9.1.pkg
open -nW op_darwin_amd64_v1.9.1.pkg
{{- else if (eq .chezmoi.os "linux") }}
wget https://cache.agilebits.com/dist/1P/op/pkg/v1.9.1/op_linux_amd64_v1.9.1.zip
unzip op_linux_amd64_v1.9.1.zip -d op
sudo mv op/op /usr/local/bin
{{- end }}
op update
{{- $opemail := promptString "Enter your 1password email" }}
eval $(op signin my.1password.com {{ $opemail | quote }})

# rg / ripgrep
{{- if (eq .chezmoi.os "darwin") }}
brew install ripgrep
{{- else if (eq .chezmoi.os "linux") }}
curl -LO https://github.com/BurntSushi/ripgrep/releases/download/12.1.1/ripgrep_12.1.1_amd64.deb
sudo dpkg -i ripgrep_12.1.1_amd64.deb
{{- end }}

# fzf
git clone --depth 1 https://github.com/junegunn/fzf.git $HOME/.fzf
$HOME/.fzf/install --no-bash --no-fish --no-update-rc

# neovim
{{- $nvimbinary := "" }}
{{- if (eq .chezmoi.os "darwin") }}
wget https://github.com/neovim/neovim/releases/download/v0.6.1/nvim-macos.tar.gz
tar xzvf nvim-macos.tar.gz
sudo mv ./nvim-osx64 /usr/local/nvim-osx64-0.6.1
{{- $nvimbinary = "/usr/local/nvim-osx64-0.6.1/bin/nvim" }}
{{- else if (eq .chezmoi.os "linux") }}
wget https://github.com/neovim/neovim/releases/download/v0.6.1/nvim.appimage
sudo mv nvim.appimage /usr/local/bin/nvim-0.6.1.appimage
{{- $nvimbinary = "/usr/local/bin/nvim-0.6.1.appimage" }}
{{- end }}
sudo chmod a+x {{ $nvimbinary }}

sudo tee -a /usr/local/bin/nvim > /dev/null <<EOF
#!/usr/bin/env bash
# Auto-load sessions when starting nvim
# Requires https://github.com/tpope/vim-obsession
if test \$# -gt 0; then
  {{ $nvimbinary }} "\$@"
elif test -f Session.vim; then
  {{ $nvimbinary }} -S
else
  {{ $nvimbinary }} -c Obsession
fi
EOF
sudo chmod a+x /usr/local/bin/nvim

# Brave browser
{{- if (eq .chezmoi.os "darwin") }}
# TODO
{{- else if (eq .chezmoi.os "linux") }}
# see: https://brave.com/linux/
sudo apt install apt-transport-https curl
sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list
sudo apt update
sudo apt install brave-browser

# Set brave as the default browser
sudo update-alternatives --config x-www-browser
sudo update-alternatives --config gnome-www-browser
xdg-settings set default-web-browser brave-browser.desktop
{{- end }}

# zsh-syntax-highliting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.zsh/zsh-syntax-highlighting

# rust via rustup
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env

# alacritty, based on https://github.com/alacritty/alacritty/blob/master/INSTALL.md#prerequisites
# Fetch the code
mkdir -p $HOME/dev
git clone https://github.com/alacritty/alacritty.git $HOME/dev/alacritty
cd $HOME/dev/alacritty
# Setup rust
rustup override set stable
rustup update stable
{{- if (eq .chezmoi.os "darwin") }}
# Build + install
make app
cp -r target/release/osx/Alacritty.app /Applications/
{{- else if (eq .chezmoi.os "linux") }}
# Install build deps
apt-get install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev python3 python3-venv gzip
# Build + install
cargo build --release
sudo cp target/release/alacritty /usr/local/bin # or anywhere else in $PATH
{{- end }}
# Terminfo
sudo tic -xe alacritty,alacritty-direct extra/alacritty.info
{{- if (eq .chezmoi.os "linux") }}
# Desktop Entry
sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
sudo desktop-file-install extra/linux/Alacritty.desktop
sudo update-desktop-database
# Man pages
sudo mkdir -p /usr/local/share/man/man1
gzip -c extra/alacritty.man | sudo tee /usr/local/share/man/man1/alacritty.1.gz > /dev/null
{{- end }}
# Shell completion
mkdir -p $HOME/.zsh_functions
cp extra/completions/_alacritty $HOME/.zsh_functions/_alacritty
{{- if (eq .chezmoi.os "linux") }}
# Use Alacritty as default terminal (Ctrl + Alt + T)
gsettings set org.gnome.desktop.default-applications.terminal exec 'alacritty'
{{- end }}

# Emoji picker
{{- if (eq .chezmoi.os "darwin") }}
# TODO Rocket emoji picker
{{- else if (eq .chezmoi.os "linux") }}
# Emote emoji picker
# default shortcut is Ctrl-Alt-e, remapped to Ctrl-Super-Space)
sudo snap install emote
{{- end }}

# Install RoamResearch
{{- if (eq .chezmoi.os "darwin") }}
wget https://roam-electron-deploy.s3.us-east-2.amazonaws.com/Roam+Research-0.0.8.dmg
MOUNTDIR=$(echo `hdiutil mount Roam+Research-0.0.8.dmg | tail -1 \
| awk '{$1=$2=""; print $0}'` | xargs -0 echo) \
&& sudo cp -R "${MOUNTDIR}/Roam Research.app" /Applications
{{- else if (eq .chezmoi.os "linux") }}
wget https://roam-electron-deploy.s3.us-east-2.amazonaws.com/roam-research_0.0.8_amd64.deb
sudo dpkg -i roam-research_0.0.8_amd64.deb
{{- end }}

# fontforge for patching Input Mono later
{{- if (eq .chezmoi.os "darwin") }}
wget https://github.com/fontforge/fontforge/releases/download/20201107/FontForge-2020-11-07-21ad4a1.app.dmg
MOUNTDIR=$(echo `hdiutil mount FontForge-2020-11-07-21ad4a1.app.dmg | tail -1 \
| awk '{$1=$2=""; print $0}'` | xargs -0 echo) \
&& sudo cp -R "${MOUNTDIR}/FontForge.app" /Applications
{{- else if (eq .chezmoi.os "linux") }}
wget https://github.com/fontforge/fontforge/releases/download/20201107/FontForge-2020-11-07-21ad4a1-x86_64.AppImage
sudo mv FontForge-2020-11-07-21ad4a1-x86_64.AppImage /usr/local/bin
sudo chmod a+x /usr/local/bin/FontForge-2020-11-07-21ad4a1-x86_64.AppImage
sudo ln -s /usr/local/bin/FontForge-2020-11-07-21ad4a1-x86_64.AppImage /usr/local/bin/fontforge
{{- end }}

# Patch fonts for use with powerlevel10k
# https://github.com/ryanoasis/nerd-fonts/issues/400#issuecomment-687229777
# Do a sparse-checkout of only the files we need
git clone https://github.com/ryanoasis/nerd-fonts.git --depth 1 --filter=blob:none --sparse $HOME/dev/nerd-fonts
cd $HOME/dev/nerd-fonts
git sparse-checkout set src/glyphs font-patcher
sudo chmod a+x font-patcher

# Install some custom fonts

# temporary directory to extract fonts to
mkdir -p fonts

# Lato Font (for RoamResearch theme)
curl 'https://fonts.google.com/download?family=Lato' -Lo lato-font.zip
unzip lato-font.zip -d fonts
rm lato-font.zip

# Open Sans Font (for RoamResearch theme)
curl 'https://fonts.google.com/download?family=Open%20Sans' -Lo open-sans-font.zip
unzip open-sans-font.zip -d fonts
rm open-sans-font.zip

# InputMono Font
curl "https://input.djr.com/build/?fontSelection=whole&a=0&g=0&i=0&l=0&zero=0&asterisk=0&braces=0&preset=default&line-height=1.2&accept=I+do&email=" -Lo InputMono-Font.zip 
unzip InputMono-Font.zip -d InputMono-Font
mv InputMono-Font/Input_Fonts/InputMono/InputMono/InputMono-*.ttf fonts
rm -rf InputMono-Font InputMono-Font.zip

# Patch Input Mono font for use with powerlevel10k
# https://github.com/ryanoasis/nerd-fonts/issues/400#issuecomment-687229777
# Prepare the output folder
mkdir -p fonts/InputMono-NerdFont/
{{- if (eq .chezmoi.os "darwin") }}
# Patch the fonts
find fonts/ -maxdepth 1 -name 'InputMono*.ttf' | parallel -j $(nproc) /Applications/FontForge.app/Contents/MacOS/FontForge -script font-patcher --no-progressbars --careful --complete --outputdir fonts/InputMono-NerdFont {} \;
{{- else if (eq .chezmoi.os "linux") }}
# Patch the fonts
find fonts/ -maxdepth 1 -name 'InputMono*.ttf' | parallel -j $(nproc) fontforge -script font-patcher --no-progressbars --careful --complete --outputdir fonts/InputMono-NerdFont {} \;
{{- end }}

{{- if (eq .chezmoi.os "linux") }}
# Get the latest emoji font for Ubuntu
wget https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf -P fonts
{{- end }}

# Move all the fonts into the correct directory
{{- if (eq .chezmoi.os "darwin") }}
mkdir -p $HOME/Library/Fonts
cp -r fonts/* $HOME/Library/Fonts
{{- else if (eq .chezmoi.os "linux") }}
mkdir -p $HOME/.fonts
cp -r fonts/* $HOME/.fonts

# NOTE: No sudo; we want to update the current user's font cache
fc-cache -f -v
{{- end }}

# fnm (node version manager)
{{- if (eq .chezmoi.os "darwin") }}
brew install fnm
{{- else if (eq .chezmoi.os "linux") }}
curl -fsSL https://fnm.vercel.app/install | bash -s -- --skip-shell
{{- end }}
eval "$($HOME/.fnm/fnm env)"
mkdir -p $HOME/.zsh/completion
$HOME/.fnm/fnm completions --shell zsh > $HOME/.zsh/completion/_fnm

# node
$HOME/.fnm/fnm install v14
$HOME/.fnm/fnm default v14

# yarn
npm install --global yarn

# powerlevel10k
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $HOME/.zsh/powerlevel10k

# tmux
{{- if (eq .chezmoi.os "darwin") }}
brew install tmux
{{- else if (eq .chezmoi.os "linux") }}
sudo apt install tmux
{{- end }}

# bat
{{- if (eq .chezmoi.os "darwin") }}
brew install bat
{{- else if (eq .chezmoi.os "linux") }}
wget https://github.com/sharkdp/bat/releases/download/v0.18.0/bat_0.18.0_amd64.deb
sudo dpkg -i bat_0.18.0_amd64.deb
{{- end }}

# fd
{{- if (eq .chezmoi.os "darwin") }}
brew install fd
{{- else if (eq .chezmoi.os "linux") }}
sudo apt install fd-find
# Override the other `fd` binary that comes with Ubuntu
sudo ln -s $(which fdfind) /usr/local/bin/fd
{{- end }}

# delta
{{- if (eq .chezmoi.os "darwin") }}
brew install git-delta
{{- else if (eq .chezmoi.os "linux") }}
wget https://github.com/dandavison/delta/releases/download/0.7.1/git-delta_0.7.1_amd64.deb
sudo dpkg -i git-delta_0.7.1_amd64.deb
{{- end }}

# Diagnostic Languageserver (lsp for prettier, eslint, etc)
yarn global add diagnostic-languageserver
yarn global add vscode-langservers-extracted
yarn global add graphql-language-service-cli
yarn global add @tailwindcss/language-server
yarn global add typescript typescript-language-server
yarn global add @fsouza/prettierd

{{- if (eq .chezmoi.os "darwin") }}
brew install lua-language-server
{{- else if (eq .chezmoi.os "linux") }}
wget https://github.com/sumneko/lua-language-server/releases/download/2.5.5/lua-language-server-2.5.5-linux-x64.tar.gz
sudo mkdir -p /usr/local/lib/lua-language-server
sudo tar xzvf lua-language-server-2.5.5-linux-x64.tar.gz -C /usr/local/lib/lua-language-server
sudo chmod a+x /usr/local/lib/lua-language-server/bin/lua-language-server
sudo chmod a+w -R /usr/local/lib/lua-language-server
sudo ln -s /usr/local/lib/lua-language-server/bin/lua-language-server /usr/local/bin/lua-language-server
{{- end }}

# Keypress visualiser
{{- if (eq .chezmoi.os "darwin") }}
brew install --cask keycastr
{{- else if (eq .chezmoi.os "linux") }}
# TODO
{{- end }}

# GitHub CLI; gh
{{- if (eq .chezmoi.os "darwin") }}
brew install gh
{{- else if (eq .chezmoi.os "linux") }}
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
sudo apt-add-repository https://cli.github.com/packages
sudo apt update
sudo apt install gh
{{- end }}

# mongoDB
{{- if (eq .chezmoi.os "darwin") }}
{{- else if (eq .chezmoi.os "linux") }}
# From  https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/
sudo apt-get install gnupg
wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
# NOTE: TODO: FIXME: Only for Ubuntu 20.04
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
sudo apt-get update
# Remove system-instaled mongo version
sudo apt-get remove mongodb-org mongodb-org-tools mongodb-server-core mongo-tools
sudo apt-get install -y mongodb-org=4.4.5 mongodb-org-server=4.4.5 mongodb-org-shell=4.4.5 mongodb-org-mongos=4.4.5 mongodb-org-tools=4.4.5
echo "mongodb-org hold" | sudo dpkg --set-selections
echo "mongodb-org-server hold" | sudo dpkg --set-selections
echo "mongodb-org-shell hold" | sudo dpkg --set-selections
echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
echo "mongodb-org-tools hold" | sudo dpkg --set-selections

# Mongo not working? Probably because there are old databases that can't be
# upgraded directly to this version, so we have to either delete the physical
# database file or rollback mongo version to oldver+1, run the daemon, then
# upgrade to the next version etc. :(
{{- end }}

# DBeaver - PostgreSQL / MySQL / etc GUI
{{- if (eq .chezmoi.os "darwin") }}
brew install --cask dbeaver-community
{{- else if (eq .chezmoi.os "linux") }}
# TODO
{{- end }}

# 1password
{{- if (eq .chezmoi.os "darwin") }}
# TODO
{{- else if (eq .chezmoi.os "linux") }}
sudo snap install 1password --edge
{{- end }}

# 1password browser extension
{{- if (eq .chezmoi.os "darwin") }}
# TODO
{{- else if (eq .chezmoi.os "linux") }}
xdg-open https://chrome.google.com/webstore/detail/1password-%E2%80%93-password-mana/aeblfdkhhhdcdjpifhhbdiojplfjncoa
{{- end }}

# pdftk
{{- if (eq .chezmoi.os "darwin") }}
wget https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/pdftk_server-2.02-mac_osx-10.11-setup.pkg
open -nW pdftk_server-2.02-mac_osx-10.11-setup.pkg
{{- else if (eq .chezmoi.os "linux") }}
# TODO
{{- end }}

# onivim2
# TODO
{{- if (eq .chezmoi.os "darwin") }}
# TODO
{{- else if (eq .chezmoi.os "linux") }}
xdg-open https://onivim.io/early-access-portal
xdg-open "https://onivim.github.io/docs/getting-started/installation#linux-x64"

# Setup the correct alias for the onivim2 executable
sudo ln -s /usr/local/bin/Onivim2-x86_64-master.AppImage /usr/local/bin/oni2
{{- end }}

# Signal messenger
{{- if .codespaces }}
# Not on Codespaces
{{- else if (eq .chezmoi.os "darwin") }}
# TODO
{{- else if (eq .chezmoi.os "linux") }}
wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > signal-desktop-keyring.gpg
cat signal-desktop-keyring.gpg | sudo tee -a /usr/share/keyrings/signal-desktop-keyring.gpg > /dev/null

echo "deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt `lsb_release -cs` main" | sudo tee -a /etc/apt/sources.list.d/signal-`lsb_release -cs`.list

sudo apt update && sudo apt install signal-desktop
{{- end }}

*/}}

# Fix permissions of zsh folders if necessary
# See https://stackoverflow.com/a/22753363/473961
compaudit | xargs chmod g-w

# TODO
# - Install:
#.  - git-lfs
#   - onivim2 extensions
#   - prettybat https://github.com/eth-p/bat-extras/blob/master/doc/prettybat.md
{{- end }}
