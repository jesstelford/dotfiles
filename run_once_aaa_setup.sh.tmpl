#!/usr/bin/env bash

{{- /* Completely disable this script in Codespaces for now */}}
{{- if not .codespaces }}

# IMPORTANT: This file must be idempotent because we don't know when/if it'll
# be re-run.

{{- /* Use for doing different things on different machines

{{- if .codespaces }}
# Setup for codespaces
{{- else if (eq .chezmoi.os "darwin") }}
# Setup for MacOS
{{- else if (eq .chezmoi.os "linux") }}
# Setup for linux
{{- end }}

*/}}

{{- /* Use for doing different things on different machines

{{- if (or (.codespaces) (eq .chezmoi.os "linux")) }}
# Setup for Linux or codespaces
{{- else if (eq .chezmoi.os "darwin") }}
# Setup for MacOS
{{- end }}

*/}}

# toolchain setup
{{- if (eq .chezmoi.os "darwin") }}
xcode-select --install
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew install wget
{{- else if (eq .chezmoi.os "linux") }}
# Setup for linux
{{- end }}

# Some prep for ZSH
mkdir -p ~/.zsh

# 1password CLI
{{- if (eq .chezmoi.os "darwin") }}
wget https://cache.agilebits.com/dist/1P/op/pkg/v1.9.1/op_darwin_amd64_v1.9.1.pkg
open -nW op_darwin_amd64_v1.9.1.pkg
{{- else if (eq .chezmoi.os "linux") }}
wget https://cache.agilebits.com/dist/1P/op/pkg/v1.9.1/op_linux_amd64_v1.9.1.zip
unzip op_linux_amd64_v1.9.1.zip -d op
sudo mv op/op /usr/local/bin
{{- end }}
op update
{{- $opemail := promptString "Enter your 1password email" }}
eval $(op signin my.1password.com {{ $opemail | quote }})

# rg / ripgrep
{{- if (eq .chezmoi.os "darwin") }}
brew install ripgrep
{{- else if (eq .chezmoi.os "linux") }}
# TODO
# browse here and install the .deb
xdg-open https://github.com/BurntSushi/ripgrep/releases/latest
{{- end }}

# fzf
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install --no-bash --no-fish --no-update-rc

# neovim
{{- if (eq .chezmoi.os "darwin") }}
# TODO
{{- else if (eq .chezmoi.os "linux") }}
sudo apt-get install python-software-properties
sudo add-apt-repository ppa:neovim-ppa/stable
sudo apt-get update
sudo apt-get install neovim
{{- end }}

# Brave browser
{{- if (eq .chezmoi.os "darwin") }}
# TODO
{{- else if (eq .chezmoi.os "linux") }}
# see: https://brave.com/linux/
sudo apt install apt-transport-https curl
sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list
sudo apt update
sudo apt install brave-browser

# Set brave as the default browser
sudo update-alternatives --config x-www-browser
sudo update-alternatives --config gnome-www-browser
xdg-settings set default-web-browser brave-browser.desktop
{{- end }}

# zsh-syntax-highliting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.zsh/zsh-syntax-highlighting

# rust via rustup
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env

# alacritty, based on https://github.com/alacritty/alacritty/blob/master/INSTALL.md#prerequisites
# Fetch the code
mkdir -p ~/dev
git clone https://github.com/alacritty/alacritty.git ~/dev/alacritty
cd ~/dev/alacritty
# Setup rust
rustup override set stable
rustup update stable
{{- if (eq .chezmoi.os "darwin") }}
# Build + install
make app
cp -r target/release/osx/Alacritty.app /Applications/
{{- else if (eq .chezmoi.os "linux") }}
# Install build deps
apt-get install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev python3 gzip
# Build + install
cargo build --release
sudo cp target/release/alacritty /usr/local/bin # or anywhere else in $PATH
{{- end }}
# Terminfo
sudo tic -xe alacritty,alacritty-direct extra/alacritty.info
{{- if (eq .chezmoi.os "linux") }}
# Desktop Entry
sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
sudo desktop-file-install extra/linux/Alacritty.desktop
sudo update-desktop-database
# Man pages
sudo mkdir -p /usr/local/share/man/man1
gzip -c extra/alacritty.man | sudo tee /usr/local/share/man/man1/alacritty.1.gz > /dev/null
{{- end }}
# Shell completion
mkdir -p ~/.zsh_functions
cp extra/completions/_alacritty ~/.zsh_functions/_alacritty
{{- if (eq .chezmoi.os "linux") }}
# Use Alacritty as default terminal (Ctrl + Alt + T)
gsettings set org.gnome.desktop.default-applications.terminal exec 'alacritty'
{{- end }}

# Emoji picker
{{- if (eq .chezmoi.os "darwin") }}
# TODO Rocket emoji picker
{{- else if (eq .chezmoi.os "linux") }}
# Emote emoji picker (default shortcut is Ctrl-Alt-e)
sudo snap install emote
{{- end }}

# Install some custom fonts
{{- if (eq .chezmoi.os "darwin") }}
mkdir -p ~/Library/Fonts
# TODO: InputMono font
{{- else if (eq .chezmoi.os "linux") }}
mkdir -p ~/.fonts
# Get the latest emoji font for Ubuntu
wget https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf -P ~/.fonts
# TODO: InputMono font
{{- end }}


# fontforge for patching Input Mono later
{{- if (eq .chezmoi.os "darwin") }}
wget https://github.com/fontforge/fontforge/releases/download/20201107/FontForge-2020-11-07-21ad4a1.app.dmg
MOUNTDIR=$(echo `hdiutil mount FontForge-2020-11-07-21ad4a1.app.dmg | tail -1 \
| awk '{$1=$2=""; print $0}'` | xargs -0 echo) \
&& sudo cp -R "${MOUNTDIR}/FontForge.app" /Applications
{{- else if (eq .chezmoi.os "linux") }}
sudo apt-get install software-properties-common
sudo add-apt-repository ppa:fontforge/fontforge
sudo apt-get update
sudo apt-get install fontforge
{{- end }}

# Patch Input Mono font for use with powerlevel10k
# https://github.com/ryanoasis/nerd-fonts/issues/400#issuecomment-687229777
# Do a sparse-checkout of only the files we need
git clone https://github.com/ryanoasis/nerd-fonts.git --depth 1 --filter=blob:none --sparse ~/dev/nerd-fonts
cd ~/dev/nerd-fonts
git sparse-checkout set src/glyphs font-patcher
sudo chmod a+x font-patcher
{{- if (eq .chezmoi.os "darwin") }}
# Grab some build depenencies
brew install findutils coreutils parallel
# Prepare the output folder
mkdir -p ~/Library/Fonts/InputMono-NerdFont/
# Patch the fonts
find ~/Library/Fonts/ -maxdepth 1 -name 'InputMono*.ttf' | parallel -j $(nproc) /Applications/FontForge.app/Contents/MacOS/FontForge -script font-patcher --no-progressbars --careful --complete --outputdir ~/Library/Fonts/InputMono-NerdFont {} \;
{{- else if (eq .chezmoi.os "linux") }}
# Prepare the output folder
mkdir -p ~/.fonts/InputMono-NerdFont/
# Patch the fonts
find ~/.fonts/ -maxdepth 1 -name 'InputMono*.ttf' | parallel -j $(nproc) fontforge -script font-patcher --no-progressbars --careful --complete --outputdir ~/.fonts/InputMono-NerdFont {} \;

# NOTE: No sudo; we want to update the current user's font cache
fc-cache -f -v
{{- end }}

# powerlevel10k
git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.zsh/powerlevel10k
# restart zsh properly to load powerlevel10k
exec ~/.zshrc

# 1password
{{- if (eq .chezmoi.os "darwin") }}
# TODO
{{- else if (eq .chezmoi.os "linux") }}
sudo snap install 1password --edge
{{- end }}

# 1password browser extension
{{- if (eq .chezmoi.os "darwin") }}
# TODO
{{- else if (eq .chezmoi.os "linux") }}
xdg-open https://chrome.google.com/webstore/detail/1password-%E2%80%93-password-mana/aeblfdkhhhdcdjpifhhbdiojplfjncoa
{{- end }}

# onivim2
# TODO
{{- if (eq .chezmoi.os "darwin") }}
# TODO
{{- else if (eq .chezmoi.os "linux") }}
xdg-open https://onivim.io/early-access-portal
xdg-open "https://onivim.github.io/docs/getting-started/installation#linux-x64"

# Setup the correct alias for the onivim2 executable
sudo ln -s /usr/local/bin/Onivim2-x86_64-master.AppImage /usr/local/bin/oni2
{{- end }}

# TODO
# - Install:
#   - fonts (Input Mono)
#.  - delta: https://github.com/dandavison/delta
#.    - And theme: Coldark-Dark
#.  - git (latest version)
#.  - git-lfs
#.  - GitHub's cli tool
#   - bat
#   - tmux
#   - fnm
#   - node
#   - onivim2 extensions
# - Install 
# - Replace `~` with `$HOME`
{{- end }}
