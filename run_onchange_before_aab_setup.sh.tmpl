#!/usr/bin/env bash

# IMPORTANT: This file must be idempotent because we don't know when/if it'll
# be re-run.

# A runner for functions which perform actions, resulting in clean output for
# successful runs.
# Usage:
#
# # Note the '(' is important: It makes this a subshell so it can return with an
# # exit code when `set -e` is set.
# example_func() (
#   # This is important to ensure this subshell exits with a code when any
#   # commands fail
#   set -e
#   echo "Some pre-execution output: $1"
#   false
#   # true
#   echo "Things have happened"
# )
# 
# # Execute the `example_func` function, buffering output and showing a
# # success/failure message.
# runner example_func "An example argument"

runner() {
  echo ""
  echo "Running $1..."

  # 1. $@ is all the arguments passed to this function
  # 2. Executing "$@" will execute it like a command to bash. Ie; if the
  #    arguments are [echo "foo"], it will execute `echo "foo"`
  "$@"

  # 1. This next line depends on the function being executed: It must be a
  #    sub-shell ie; some_func() ( ... ). Notice the '(' instead of '{'. This is
  #    to ensure we can call `set -e` within that subshell, causing it to return
  #    with an exit code.
  # 2. The exit code is stored in the $? variable.
  # 3. If the command succeeded, the exit code ($?) will be 0, so we print the
  #    tick
  # 4. If the command failed, the exit code ($?) will be non-0, so we print the
  #    cross, AND the output we captured above.
  [[ $? -eq 0 ]] && echo "✅ $1" || echo "❌ $1"
}

{{- /* Use for doing different things on different machines

{{- if not .islocalenv }}
# Setup for codespaces / CI / spin
{{- else if (eq .chezmoi.os "darwin") }}
# Setup for MacOS
{{- else if (eq .chezmoi.os "linux") }}
# Setup for linux
{{- end }}

*/}}

{{- /* Use for doing different things on different machines

{{- if (or (.codespaces) (eq .chezmoi.os "linux")) }}
# Setup for Linux or codespaces
{{- else if (eq .chezmoi.os "darwin") }}
# Setup for MacOS
{{- end }}

*/}}

{{- if (eq .chezmoi.os "darwin") }}
  # Ensure homebrew is available on the path for following commands
  # Necessary because this script is run before chezmoi copies dotfiles
  # (normally this lives in the .bash_profile)
  eval "$(/opt/homebrew/bin/brew shellenv)"

  # Install a .dmg file into the /Applications directory
  # NOTE: This is running as a subshell '(' so we can use 'set -e' to bail
  # immediately from the function if anything errors.
  #
  # Usage:
  # install_dmg https://bahoom.com/hyperswitch/HyperSwitch.dmg HyperSwitch.app
  install_dmg() (
    set -e
    STRATEGY="${2:-app}"
    wget $1 -O /tmp/installer.dmg
    # Mount the .dmg and capture the directory it mounted to
    MOUNTDIR=$(echo `hdiutil mount /tmp/installer.dmg | tail -1 | awk '{$1=$2=""; print $0}'` | xargs -0 echo)
    case "$STRATEGY" in
    "app")
      # Copy out the .app file to /Applications
      sudo cp -R "${MOUNTDIR}"/*.app /Applications
      ;;
    "pkg")
      # Run the package installer script
      open -nW "${MOUNTDIR}"/*.pkg
      ;;
    esac
    # Cleanup
    hdiutil unmount "$MOUNTDIR"
    rm -f /tmp/installer.dmg
  )
{{- end }}

install_dev_deps() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    brew install wget git findutils coreutils parallel tree
  {{- else if (eq .chezmoi.os "linux") }}
    {{- if not .spin }}
      # latest git
      sudo add-apt-repository ppa:git-core/ppa
      sudo apt --yes update
      sudo apt --yes install git
    {{- end }}
    {{- if .islocalenv }}
      sudo apt --yes install parallel
    {{- end }}
    # Ubuntu 22.04 no longer ships with libfuse2, which is required by
    # AppImages. See: https://askubuntu.com/a/1404084
    sudo apt --yes install libfuse2*
  {{- end }}
)
runner install_dev_deps

# Some prep for ZSH
mkdir -p $HOME/.zsh
mkdir -p /usr/local/bin

install_zsh() (
  set -e
  # Install it
  {{- if (eq .chezmoi.os "darwin") }}
    brew install zsh
  {{- else if (eq .chezmoi.os "linux") }}
    apt --yes install zsh
  {{- end }}
  # Set it as the default shell
  chsh -s $(which zsh)
)
runner install_dev_deps

# rg / ripgrep
install_ripgrep() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    brew install ripgrep
  {{- else if (eq .chezmoi.os "linux") }}
    curl -LO https://github.com/BurntSushi/ripgrep/releases/download/12.1.1/ripgrep_12.1.1_amd64.deb
    sudo dpkg -i ripgrep_12.1.1_amd64.deb
  {{- end }}
)
runner install_ripgrep

# fzf
install_fzf() (
  set -e
  git clone --depth 1 https://github.com/junegunn/fzf.git $HOME/.fzf
  $HOME/.fzf/install --no-bash --no-fish --no-update-rc
)
runner install_fzf

# neovim
install_neovim() (
  set -e
  {{- $nvimbinary := "" }}
  {{- if (eq .chezmoi.os "darwin") }}
    wget https://github.com/neovim/neovim/releases/download/v0.7.0/nvim-macos.tar.gz
    tar xzvf nvim-macos.tar.gz
    sudo mv ./nvim-osx64 /usr/local/nvim-osx64-0.7.0
    {{- $nvimbinary = "/usr/local/nvim-osx64-0.7.0/bin/nvim" }}
  {{- else if (eq .chezmoi.os "linux") }}
    wget https://github.com/neovim/neovim/releases/download/v0.7.0/nvim.appimage
    {{- if .spin }}
      {{- /* spin does not have fuse, so extract the image ready for use */}}
      sudo chmod a+x ./nvim.appimage
      ./nvim.appimage --appimage-extract
      sudo mv ./squashfs-root /usr/local/bin/nvim-0.7.0
      {{- $nvimbinary = "/usr/local/bin/nvim-0.7.0/usr/bin/nvim" }}
    {{- else }}
      sudo mv nvim.appimage /usr/local/bin/nvim-0.7.0.appimage
      {{- $nvimbinary = "/usr/local/bin/nvim-0.7.0.appimage" }}
    {{- end }}
  {{- end }}

  {{- $term := "alacritty" }}
  {{- if .spin }}
    {{- /* Use iTerm2 at Shopify */}}
    {{- $term = "iterm2" }}
  {{- end }}

  sudo chmod a+x {{ $nvimbinary }}

  rm -f /usr/local/bin/nvim
  sudo tee -a /usr/local/bin/nvim > /dev/null <<EOF
#!/usr/bin/env bash
# Auto-load sessions when starting nvim
# Requires https://github.com/tpope/vim-obsession
if test \$# -gt 0; then
  # Explicityly set the terminal here so nvim knows its running inside {{ $term }}
  # (necessary when running inside tmux)
  TERM={{ $term }} {{ $nvimbinary }} "\$@"
elif test -f Session.vim; then
  TERM={{ $term }} {{ $nvimbinary }} -S
else
  TERM={{ $term }} {{ $nvimbinary }} -c Obsession
fi
EOF
  sudo chmod a+x /usr/local/bin/nvim

  # Install vim-plug
  nvim -es -u NONE -i NONE -c "source ./scripts/install-vim-plug.vim" -c "qa"

  # Install plugins
  # NOTE: We reference the plugin script via the chezmoi directyory. Necessary
  # because this script is run before chezmoi copies dotfiles.
  nvim -es -u NONE -i NONE -c "source ./dot_config/nvim/plugins.vim" -c "PlugInstall --sync" -c "qa"
)
runner install_neovim

{{- if .islocalenv }}
# Brave browser
install_brave() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    install_dmg https://referrals.brave.com/latest/Brave-Browser.dmg
  {{- else if (eq .chezmoi.os "linux") }}
    # see: https://brave.com/linux/
    sudo apt --yes install apt-transport-https curl
    sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list
    sudo apt --yes update
    sudo apt --yes install brave-browser

    # Set brave as the default browser
    sudo update-alternatives --config x-www-browser
    sudo update-alternatives --config gnome-www-browser
    xdg-settings set default-web-browser brave-browser.desktop
  {{- end }}
)
runner install_brave
{{- end }}

# zsh-syntax-highlighting
install_zsh_syntax_highlighting() (
  set -e
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.zsh/zsh-syntax-highlighting
)
runner install_zsh_syntax_highlighting

{{- if .islocalenv }}
# rust via rustup
install_rust() (
  set -e
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  source $HOME/.cargo/env
)
runner install_rust

if [ -f "$HOME/.cargo/env" ];
then
  # NOTE: Has to be done outside the subshell to ensure it's available for
  # following commands
  source $HOME/.cargo/env
fi
{{- end }}

{{- if .islocalenv }}
# alacritty, based on https://github.com/alacritty/alacritty/blob/master/INSTALL.md#prerequisites
install_alacritty() (
  set -e
  # Fetch the code
  mkdir -p $HOME/dev
  git clone https://github.com/alacritty/alacritty.git $HOME/dev/alacritty
  cd $HOME/dev/alacritty
  git checkout f4bdf5f
  # Setup rust
  rustup override set stable
  rustup update stable
  {{- if (eq .chezmoi.os "darwin") }}
    # Build + install
    make app
    cp -r target/release/osx/Alacritty.app /Applications/
  {{- else if (eq .chezmoi.os "linux") }}
    # Install build deps
    apt-get --yes install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3 python3-venv gzip
    # Build + install
    cargo build --release
    sudo cp target/release/alacritty /usr/local/bin # or anywhere else in $PATH
  {{- end }}
  # Terminfo
  sudo tic -xe alacritty,alacritty-direct extra/alacritty.info
  {{- if (eq .chezmoi.os "linux") }}
    # Desktop Entry
    sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
    sudo desktop-file-install extra/linux/Alacritty.desktop
    sudo update-desktop-database
    # Man pages
    sudo mkdir -p /usr/local/share/man/man1
    gzip -c extra/alacritty.man | sudo tee /usr/local/share/man/man1/alacritty.1.gz > /dev/null
    gzip -c extra/alacritty-msg.man | sudo tee /usr/local/share/man/man1/alacritty-msg.1.gz > /dev/null
  {{- end }}
  # Shell completion
  mkdir -p $HOME/.zsh_functions
  cp extra/completions/_alacritty $HOME/.zsh_functions/_alacritty
  {{- if (eq .chezmoi.os "linux") }}
    # Use Alacritty as default terminal (Ctrl + Alt + T)
    gsettings set org.gnome.desktop.default-applications.terminal exec 'alacritty'
  {{- end }}
)
runner install_alacritty
{{- end }}

{{- if .islocalenv }}
# Emoji picker
install_emoji_picker() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    # Rocket emoji picker
    install_dmg https://macrelease.matthewpalmer.net/Rocket.dmg
    # Set shortcut to "~"
    defaults write net.matthewpalmer.Rocket.plist "hot-key-b8-iaK-thyib-yoV-Kep-It" -string "~"
    defaults write net.matthewpalmer.Rocket.plist "launch-at-login" -bool true
  {{- else if (eq .chezmoi.os "linux") }}
    # Emote emoji picker
    # default shortcut is Ctrl-Alt-e, remapped to Ctrl-Super-Space)
    sudo snap install emote
  {{- end }}
)
runner install_emoji_picker
{{- end }}

{{- if .islocalenv }}
# Install RoamResearch
install_roam_research() (
  set -e
  {{- $roamversion := "0.0.14" }}
  {{- if (eq .chezmoi.os "darwin") }}
    install_dmg https://roam-electron-deploy.s3.us-east-2.amazonaws.com/Roam+Research-{{ $roamversion }}.dmg
  {{- else if (eq .chezmoi.os "linux") }}
    wget https://roam-electron-deploy.s3.us-east-2.amazonaws.com/roam-research_{{ $roamversion }}_amd64.deb
    sudo dpkg -i roam-research_{{ $roamversion }}_amd64.deb
  {{- end }}
)
runner install_roam_research
{{- end }}

{{- if .islocalenv }}
# fontforge for patching Input Mono later
install_fontforge() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    install_dmg https://github.com/fontforge/fontforge/releases/download/20201107/FontForge-2020-11-07-21ad4a1.app.dmg
  {{- else if (eq .chezmoi.os "linux") }}
    wget https://github.com/fontforge/fontforge/releases/download/20201107/FontForge-2020-11-07-21ad4a1-x86_64.AppImage
    sudo mv FontForge-2020-11-07-21ad4a1-x86_64.AppImage /usr/local/bin
    sudo chmod a+x /usr/local/bin/FontForge-2020-11-07-21ad4a1-x86_64.AppImage
    sudo ln -s /usr/local/bin/FontForge-2020-11-07-21ad4a1-x86_64.AppImage /usr/local/bin/fontforge
  {{- end }}
)
runner install_fontforge
{{- end }}

{{- if .islocalenv }}
install_fonts() (
  set -e
  # Patch fonts for use with powerlevel10k
  # https://github.com/ryanoasis/nerd-fonts/issues/400#issuecomment-687229777
  # Do a sparse-checkout of only the files we need
  git clone https://github.com/ryanoasis/nerd-fonts.git --depth 1 --filter=blob:none --sparse $HOME/dev/nerd-fonts
  cd $HOME/dev/nerd-fonts
  git sparse-checkout set src/glyphs font-patcher
  sudo chmod a+x font-patcher

  # Install some custom fonts

  # temporary directory to extract fonts to
  mkdir -p fonts

  # Lato Font (for RoamResearch theme)
  curl 'https://fonts.google.com/download?family=Lato' -Lo lato-font.zip
  unzip lato-font.zip -d fonts
  rm lato-font.zip

  # Open Sans Font (for RoamResearch theme)
  curl 'https://fonts.google.com/download?family=Open%20Sans' -Lo open-sans-font.zip
  unzip open-sans-font.zip -d fonts
  rm open-sans-font.zip

  # InputMono Font
  curl "https://input.djr.com/build/?fontSelection=whole&a=0&g=0&i=0&l=0&zero=0&asterisk=0&braces=0&preset=default&line-height=1.2&accept=I+do&email=" -Lo InputMono-Font.zip 
  unzip InputMono-Font.zip -d InputMono-Font
  mv InputMono-Font/Input_Fonts/InputMono/InputMono/InputMono-*.ttf fonts
  rm -rf InputMono-Font InputMono-Font.zip

  # Patch Input Mono font for use with powerlevel10k
  # https://github.com/ryanoasis/nerd-fonts/issues/400#issuecomment-687229777
  # Prepare the output folder
  mkdir -p fonts/InputMono-NerdFont/
  {{- if (eq .chezmoi.os "darwin") }}
    # Required deps. See: https://github.com/FontCustom/fontcustom/issues/382
    brew tap bramstein/webfonttools
    brew install woff2 sfnt2woff eot-utils

    # Patch the fonts
    find fonts/ -maxdepth 1 -name 'InputMono*.ttf' | parallel -j $(nproc) /Applications/FontForge.app/Contents/MacOS/FontForge -script font-patcher --no-progressbars --careful --complete --outputdir fonts/InputMono-NerdFont {} \;
  {{- else if (eq .chezmoi.os "linux") }}
    # Patch the fonts
    find fonts/ -maxdepth 1 -name 'InputMono*.ttf' | parallel -j $(nproc) fontforge -script font-patcher --no-progressbars --careful --complete --outputdir fonts/InputMono-NerdFont {} \;
  {{- end }}

  {{- if (eq .chezmoi.os "linux") }}
    # Get the latest emoji font for Ubuntu
    wget https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf -P fonts
  {{- end }}

  # Move all the fonts into the correct directory
  {{- if (eq .chezmoi.os "darwin") }}
    mkdir -p $HOME/Library/Fonts
    cp -r fonts/* $HOME/Library/Fonts
  {{- else if (eq .chezmoi.os "linux") }}
    mkdir -p $HOME/.fonts
    cp -r fonts/* $HOME/.fonts

    # NOTE: No sudo; we want to update the current user's font cache
    fc-cache -f -v
  {{- end }}
)
runner install_fonts
{{- end }}

{{- if .islocalenv }}
# fnm (node version manager)
install_fnm() (
  set -e
  curl -fsSL https://fnm.vercel.app/install | bash -s -- --force-install --skip-shell --install-dir $HOME/.fnm
  # Install the shell completions manually for zsh (because this script is run
  # in bash on first install by chezmoi)
  mkdir -p $HOME/.zsh/completion
  $HOME/.fnm/fnm completions --shell zsh > $HOME/.zsh/completion/_fnm
)
runner install_fnm

if [ -f "$HOME/.fnm/fnm" ];
then
  # Ensure fnm's executable, etc, is loaded into the current environment so we
  # can run it in the following commands
  eval "$($HOME/.fnm/fnm env)"
fi
{{- end }}

{{- if .spin }}
# nvm (node version manager)
install_nvm() (
  set -e
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
)
runner install_nvm

export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
# Load nvm in this shell (can't be in the install_nvm function since that's a
# subshell)
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
{{- end }}

# node
install_node() (
  set -e
{{- if .spin }}
  nvm install v16
  nvm alias default v16
{{- else }}
  $HOME/.fnm/fnm install v16
  $HOME/.fnm/fnm default v16
{{- end }}
)
runner install_node

# yarn
install_yarn() (
  set -e
  npm install --global yarn
)
runner install_yarn

# powerlevel10k
install_powerlevel10k() (
  set -e
  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $HOME/.zsh/powerlevel10k
)
runner install_powerlevel10k

# tmux
install_tmux() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    brew install tmux
  {{- else if (eq .chezmoi.os "linux") }}
    sudo apt --yes install tmux
  {{- end }}
)
runner install_tmux

# bat
install_bat() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    brew install bat
  {{- else if (eq .chezmoi.os "linux") }}
    wget https://github.com/sharkdp/bat/releases/download/v0.18.0/bat_0.18.0_amd64.deb
    sudo dpkg -i bat_0.18.0_amd64.deb
  {{- end }}
)
runner install_bat

# fd
install_fd() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    brew install fd
  {{- else if (eq .chezmoi.os "linux") }}
    sudo apt --yes install fd-find
    # Override the other `fd` binary that comes with Ubuntu
    sudo ln -s $(which fdfind) /usr/local/bin/fd
  {{- end }}
)
runner install_fd

# delta
install_delta() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    brew install git-delta
  {{- else if (eq .chezmoi.os "linux") }}
    wget https://github.com/dandavison/delta/releases/download/0.7.1/git-delta_0.7.1_amd64.deb
    sudo dpkg -i git-delta_0.7.1_amd64.deb
  {{- end }}
)
runner install_delta

# Diagnostic Languageserver (lsp for prettier, eslint, etc)
install_diagnostic_lsp() (
  set -e
  yarn global add diagnostic-languageserver
)
runner install_diagnostic_lsp

install_vscode_lsp() (
  set -e
  yarn global add vscode-langservers-extracted
)
runner install_vscode_lsp

install_graphql_lsp() (
  set -e
  yarn global add graphql-language-service-cli
)
runner install_graphql_lsp

install_tailwind_lsp() (
  set -e
  yarn global add @tailwindcss/language-server
)
runner install_tailwind_lsp

install_typescript_lsp() (
  set -e
  yarn global add typescript typescript-language-server
)
runner install_typescript_lsp

install_remark_lsp() (
  set -e
  yarn global add remark-language-server
)
runner install_remark_lsp

install_lua_lsp() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    brew install lua-language-server
  {{- else if (eq .chezmoi.os "linux") }}
    wget https://github.com/sumneko/lua-language-server/releases/download/2.5.5/lua-language-server-2.5.5-linux-x64.tar.gz
    sudo mkdir -p /usr/local/lib/lua-language-server
    sudo tar xzvf lua-language-server-2.5.5-linux-x64.tar.gz -C /usr/local/lib/lua-language-server
    sudo chmod a+x /usr/local/lib/lua-language-server/bin/lua-language-server
    sudo chmod a+w -R /usr/local/lib/lua-language-server
    sudo ln -s /usr/local/lib/lua-language-server/bin/lua-language-server /usr/local/bin/lua-language-server
  {{- end }}
)
runner install_lua_lsp

install_prettierd() (
  set -e
  yarn global add @fsouza/prettierd
)
runner install_prettierd

{{- if (eq .chezmoi.os "darwin") }}
# Keypress visualiser
install_keycastr() (
  set -e
  brew install --cask keycastr
)
runner install_keycastr
{{- end }}

{{- if .islocalenv }}
# GitHub CLI; gh
install_gh() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    brew install gh
  {{- else if (eq .chezmoi.os "linux") }}
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
    sudo apt-add-repository --yes https://cli.github.com/packages
    sudo apt --yes update
    sudo apt --yes install gh
  {{- end }}
  gh auth login
)
runner install_gh
{{- end }}

{{- if .islocalenv }}
# GitHub CLI Extensions
install_gh_dash() (
  set -e
  gh extension install dlvhdr/gh-dash
)
runner install_gh_dash
{{- end }}

{{- if .islocalenv }}
# mongoDB
install_mongodb() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    # TODO
  {{- else if (eq .chezmoi.os "linux") }}
    # From  https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/
    sudo apt-get --yes install gnupg
    wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
    # NOTE: TODO: FIXME: Only for Ubuntu 20.04
    echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
    sudo apt-get --yes update
    # Remove system-instaled mongo version
    sudo apt-get --yes remove mongodb-org mongodb-org-tools mongodb-server-core mongo-tools
    sudo apt-get --yes install -y mongodb-org=4.4.5 mongodb-org-server=4.4.5 mongodb-org-shell=4.4.5 mongodb-org-mongos=4.4.5 mongodb-org-tools=4.4.5
    echo "mongodb-org hold" | sudo dpkg --set-selections
    echo "mongodb-org-server hold" | sudo dpkg --set-selections
    echo "mongodb-org-shell hold" | sudo dpkg --set-selections
    echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
    echo "mongodb-org-tools hold" | sudo dpkg --set-selections

    # Mongo not working? Probably because there are old databases that can't be
    # upgraded directly to this version, so we have to either delete the physical
    # database file or rollback mongo version to oldver+1, run the daemon, then
    # upgrade to the next version etc. :(
  {{- end }}
)
runner install_mongodb
{{- end }}

{{- if .islocalenv }}
# DBeaver - PostgreSQL / MySQL / etc GUI
install_dbeaver() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    brew install --cask dbeaver-community
  {{- else if (eq .chezmoi.os "linux") }}
    wget https://github.com/dbeaver/dbeaver/releases/download/22.1.0/dbeaver-ce_22.1.0_amd64.deb
    # Install the package
    sudo dpkg -i dbeaver-ce_22.1.0_amd64.deb
  {{- end }}
)
runner install_dbeaver
{{- end }}

# golang
install_golang() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    wget https://go.dev/dl/go1.18.4.darwin-arm64.pkg
    open -nW go1.18.4.darwin-arm64.pkg
  {{- else if (eq .chezmoi.os "linux") }}
    wget https://go.dev/dl/go1.18.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go1.18.linux-amd64.tar.gz
  {{- end }}
)
runner install_golang

{{- if .islocalenv }}
# 1password
install_one_password_desktop() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    wget https://downloads.1password.com/mac/1Password.zip
    unzip 1Password.zip -d onepassword
    open -nW "onepassword/1Password Installer.app"
  {{- else if (eq .chezmoi.os "linux") }}
    sudo snap install 1password --edge
  {{- end }}
)
runner install_one_password_desktop
{{- end }}

{{- if .islocalenv }}
# pdftk
install_pdftk() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    wget https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/pdftk_server-2.02-mac_osx-10.11-setup.pkg
    open -nW pdftk_server-2.02-mac_osx-10.11-setup.pkg
  {{- else if (eq .chezmoi.os "linux") }}
    sudo apt --yes install pdftk
  {{- end }}
)
runner install_pdftk
{{- end }}

{{- if .islocalenv }}
{{- if (eq .chezmoi.os "linux") }}
# xournal++ (for annotaing pdfs + handwriting notes)
install_xournal() (
  set -e
  # Install required deps
  sudo apt-get --yes install libportaudio2 libportaudiocpp0 libzip5
  wget https://github.com/xournalpp/xournalpp/releases/download/v1.1.1/xournalpp-1.1.1-Ubuntu-focal-x86_64.deb
  # Install the package
  sudo dpkg -i xournalpp-1.1.1-Ubuntu-focal-x86_64.deb
)
runner install_xournal
{{- end }}
{{- end }}

{{- if .islocalenv }}
# Signal messenger
install_signal() (
  set -e
  {{- if .codespaces }}
    # Not on Codespaces
  {{- else if (eq .chezmoi.os "darwin") }}
    install_dmg https://updates.signal.org/desktop/signal-desktop-mac-universal-5.47.0.dmg
  {{- else if (eq .chezmoi.os "linux") }}
    wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > signal-desktop-keyring.gpg
    cat signal-desktop-keyring.gpg | sudo tee -a /usr/share/keyrings/signal-desktop-keyring.gpg > /dev/null
 
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt `lsb_release -cs` main" | sudo tee -a /etc/apt/sources.list.d/signal-`lsb_release -cs`.list

    sudo apt --yes update && sudo apt --yes install signal-desktop
  {{- end }}
)
runner install_signal
{{- end }}

{{- if .islocalenv }}
# PICO-8
install_pico8() (
  set -e
  {{- if .codespaces }}
    # Not on Codespaces
  {{- else }}

  {{- $pico8platform := "" }}
  {{- if (eq .chezmoi.os "darwin") }}
    {{- $pico8platform = "osx" }}
  {{- else if (eq .chezmoi.os "linux") }}
    {{- $pico8platform = "linux64" }}
  {{- end }}

  # Get credentials out of 1password
  {{- $itchCredentials := onepasswordDetailsFields "kz6tex4nh5fx7a2kvohdx6tt4e" }}
  {{- $pico8zip := "/tmp/pico-8.zip" }}

  # Download the binary
  npx --package=playwright@~1.21.0 --yes -c 'dir=$(dirname `which playwright`)/../..; cp scripts/install-pico8.js $dir; cd $dir; DEST_FILE={{- $pico8zip }} USERNAME={{- $itchCredentials.username.value }} PASSWORD={{- $itchCredentials.password.value }} PLATFORM={{- $pico8platform }} node install-pico8.js'

  # Install it
  {{- if (eq .chezmoi.os "darwin") }}
    unzip {{ $pico8zip }} -d /tmp
    mv /tmp/pico-8/PICO-8.app /Applications/
  {{- else if (eq .chezmoi.os "linux") }}
    sudo unzip {{ $pico8zip }} -d /usr/lib
    sudo chmod a+x /usr/lib/pico-8/pico8
    sudo ln -s /usr/lib/pico-8/pico8 /usr/local/bin/pico8
  {{- end }}

  # Setup the cart & save data directories
  mkdir -p {{ .chezmoi.homeDir }}/dev/pico-8/carts
  mkdir -p {{ .chezmoi.homeDir }}/dev/pico-8/cdata
  {{- end }}
)
runner install_pico8
{{- end }}

{{- if .islocalenv }}
# Rectangle window manager for OSX
{{- if (eq .chezmoi.os "darwin") }}
install_rectangle() (
  set -e
  brew install --cask rectangle
)
runner install_rectangle
{{- end }}
{{- end }}

{{- if .islocalenv }}
# HyperSwitch window switcher for OSX
{{- if (eq .chezmoi.os "darwin") }}
install_hyperswitch() (
  set -e
  install_dmg https://bahoom.com/hyperswitch/HyperSwitch.dmg
)
runner install_hyperswitch
{{- end }}
{{- end }}

{{- if .islocalenv }}
# Karabiner-Elements keyboard shortcut customizer for OSX
{{- if (eq .chezmoi.os "darwin") }}
install_karabiner_elements() (
  set -e
  install_dmg https://github.com/pqrs-org/Karabiner-Elements/releases/download/v14.4.0/Karabiner-Elements-14.4.0.dmg pkg
)
runner install_karabiner_elements
{{- end }}
{{- end }}

{{- if .islocalenv }}
# LICEcap screenshot utility
{{- if (eq .chezmoi.os "darwin") }}
install_licecap() (
  set -e
  install_dmg https://www.cockos.com/licecap/licecap132.dmg
  # Set the default directory
  defaults write com.cockos.LICEcap.plist NSNavLastRootDirectory -string "~/Movies"
)
runner install_licecap
{{- end }}
{{- end }}

{{- if .islocalenv }}
# Discord
install_discord() (
  set -e
  {{- if .codespaces }}
    # Not on Codespaces
  {{- else if (eq .chezmoi.os "darwin") }}
    install_dmg https://dl.discordapp.net/apps/osx/0.0.267/Discord.dmg
  {{- else if (eq .chezmoi.os "linux") }}
    wget https://dl.discordapp.net/apps/linux/0.0.18/discord-0.0.18.deb
    sudo dpkg -i discord-0.0.18.deb
  {{- end }}
)
runner install_discord
{{- end }}

{{- if .islocalenv }}
# Moonlander keyboard setup
install_moonlander() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    # So the flashing tool can write to the keyboard
    brew install libusb

    # Install Wally, the EZ / ZSA flashing tool
    install_dmg https://configure.zsa.io/wally/osx
  {{- else if (eq .chezmoi.os "linux") }}
    # So the flashing tool can write to the keyboard
    sudo apt --yes install libusb-1.0-0-dev
    
    # Setup udev rules so the flashing tool can receive the correct events
    sudo touch /etc/udev/rules.d/50-wally.rules
    sudo tee -a /etc/udev/rules.d/50-wally.rules > /dev/null <<EOF
# STM32 rules for the Moonlander and Planck EZ
SUBSYSTEMS=="usb", ATTRS{idVendor}=="0483", ATTRS{idProduct}=="df11", \
    MODE:="0666", \
    SYMLINK+="stm32_dfu"
EOF

    # Setup udev rules for the training software to receive the correct events
    sudo touch /etc/udev/rules.d/50-oryx.rules
    sudo tee -a /etc/udev/rules.d/50-oryx.rules > /dev/null <<EOF
# Rule for all ZSA keyboards
SUBSYSTEM=="usb", ATTR{idVendor}=="3297", GROUP="plugdev"
# Rule for the Moonlander
SUBSYSTEM=="usb", ATTR{idVendor}=="3297", ATTR{idProduct}=="1969", GROUP="plugdev"
# Rule for the Ergodox EZ
SUBSYSTEM=="usb", ATTR{idVendor}=="feed", ATTR{idProduct}=="1307", GROUP="plugdev"
# Rule for the Planck EZ
SUBSYSTEM=="usb", ATTR{idVendor}=="feed", ATTR{idProduct}=="6060", GROUP="plugdev"
EOF

    # Install Wally, the EZ / ZSA flashing tool
    wget https://github.com/zsa/wally/releases/download/2.1.3-linux/wally
    sudo mv wally /usr/local/bin/wally
    sudo chmod a+x /usr/local/bin/wally
  {{- end }}
)
runner install_moonlander
{{- end }}

{{- if .islocalenv }}
# mkcert for creating SSL certs in localhost
install_mkcert() (
  set -e
  {{- if (eq .chezmoi.os "darwin") }}
    brew install mkcert
    brew install nss
  {{- else if (eq .chezmoi.os "linux") }}
    sudo apt --yes install libnss3-tools
    wget https://github.com/FiloSottile/mkcert/releases/download/v1.4.4/mkcert-v1.4.4-linux-amd64
    sudo mv mkcert-v1.4.4-linux-amd64 /usr/local/bin/
    sudo chmod a+x /usr/local/bin/mkcert-v1.4.4-linux-amd64
    sudo ln -s /usr/local/bin/mkcert-v1.4.4-linux-amd64 /usr/local/bin/mkcert
  {{- end }}
)
runner install_mkcert
{{- end }}

{{- if .islocalenv }}
{{- if (eq .chezmoi.os "darwin") }}
configure_macos() (
  set -e
  # Setup MacOS OS-level settings
  # See: https://gist.github.com/vraravam/5e28ca1720c9dddacdc0e6db61e093fe

  # Close any open System Preferences panes, to prevent them from overriding
  # settings we're about to change
  osascript -e 'tell application "System Preferences" to quit'

  # Keep-alive: update existing `sudo` time stamp until `.macos` has finished
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

  # While applying any changes to SoftwareUpdate defaults, set software update to OFF to avoid any conflict with the defaults system cache. (Also close the System Preferences app)
  sudo softwareupdate --schedule OFF

  # Disable guest login
  sudo defaults write /Library/Preferences/com.apple.loginwindow GuestEnabled -bool false

  # Message added to lock screen
  sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText "Contact: {{ .lockscreenemail }}"

  # Show remaining battery percentage" Y; then
  defaults write com.apple.menuextra.battery ShowPercent -string "YES"

  # Disable automatic capitalization as it's annoying when typing code
  defaults write -g NSAutomaticCapitalizationEnabled -bool false

  # Disable automatic period substitution as it's annoying when typing code
  defaults write -g NSAutomaticPeriodSubstitutionEnabled -bool false

  # Fix the track pad scrolling direction
  defaults write -g com.apple.swipescrolldirection -bool false

  # Show all filename extensions
  defaults write -g AppleShowAllExtensions -bool true

  # Show the POSIX path at the top of Finder
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

  # Finder: show hidden files by default
  defaults write com.apple.finder AppleShowAllFiles -bool true

  # Disable the warning when changing a file extension
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Avoid creating .DS_Store files on network or USB volumes
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
  defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true

  # Prevent Photos from opening automatically when devices are plugged in
  defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

  # Add a context menu item for showing the Web Inspector in web views
  defaults write -g WebKitDeveloperExtras -bool true

  # Don't default to saving documents to iCloud:
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

  # Set your screen to lock as soon as the screensaver starts:
  defaults write com.apple.screensaver askForPassword -int 1
  defaults write com.apple.screensaver askForPasswordDelay -int 0

  # Save screenshots to the desktop
  mkdir -p "${HOME}/Desktop/screenshots"
  defaults write com.apple.screencapture location -string "${HOME}/Desktop/screenshots"

  # Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)
  defaults write com.apple.screencapture type -string "png"

  # Increase key repeat speed
  defaults write -g InitialKeyRepeat -int 12
  defaults write -g KeyRepeat -int 1

  # Sane scroll direction
  defaults write -g com.apple.swipescrolldirection -bool NO
  
  # Fix display issues. See: https://tonsky.me/blog/monitors/
  # Disable font smoothing to avoid bad antialiasing
  defaults -currentHost write -g AppleFontSmoothing -int 0
  
  # Disable 2 finger swiping for back/forward
  defaults write NSGlobalDomain AppleEnableSwipeNavigateWithScrolls -bool false
  defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false
  defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false


  # Now that we're done, turn software updates back on
  sudo softwareupdate --schedule ON
)
runner configure_macos
{{- end }}
{{- end }}

fix_zsh_permissions() (
  set -e
  # Fix permissions of zsh folders if necessary
  # See https://stackoverflow.com/a/22753363/473961
  {{- /* xargs on MacOS will skip the command on empty input, but POSIX needs an extra flag */}}
  /bin/zsh -i -c 'compaudit | xargs{{ if (eq .chezmoi.os "linux") }} --no-run-if-empty{{ end }} chmod g-w'
)
runner fix_zsh_permissions

echo "🎉 Done!"
echo ""
# TODO: How can I automate these?
echo "Some manual installation steps:"
echo "  https://1password.com/downloads/#browsers"
echo "  https://simpl.fyi/gmail"
echo "  https://github.com/git-lfs/git-lfs/releases/latest"
echo "  https://github.com/eth-p/bat-extras/blob/master/doc/prettybat.md"
{{- if (eq .chezmoi.os "darwin") }}
echo "  Enable Integer Scaling resolution: https://tonsky.me/blog/monitors/#integer-scaling"
echo "  Disable True Tone: https://support.apple.com/en-au/HT208909"
{{- end }}
echo ""
echo "Now reboot"
