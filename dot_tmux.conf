# Ensure we have the right colors set
# See: https://github.com/alacritty/alacritty/issues/1401#issuecomment-422870845
set -g default-terminal "xterm-256color"

# I use zsh, not bash
set -g default-shell "/bin/zsh"

# scroll-back history
set -g history-limit 100000

# TODO: What does this do?
#set-option -g set-titles on
# Don't rename windows automatically, so we can use <leader>, to name them
# manually. See:
# https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf#stop-renaming-windows-automatically
set-option -g allow-rename off

# Allow clicking between windows / panes
set -g mouse on

# Start windows at 1
set -g base-index 1

# Start panes at 1 (note: This is a per-window setting, hence the setw)
setw -g pane-base-index 1

# Ensure we don't pause for too long when chroding key presses
# See: https://unix.stackexchange.com/a/608179/94874
set -sg escape-time 10

# In copy mode, use vi-style navigation instead of emacs
# (wtf is "copy mode"?)
set -g mode-keys vi

# Use Ctrl-Space as prefix
unbind-key C-b
set-option -g prefix C-Space
unbind-key C-Space
bind-key C-Space send-prefix

# Make tmux look a bit nicer
set-option -g status-position top
set -g status-justify left
set -g window-status-style "bg=colour238,fg=colour102,fill=colour238"
set -g window-status-current-style "bg=colour236,fg=colour188"
set -g window-status-separator '#[bg=colour238]#[fg=colour243]‚ùò'
set -g status-left '#[bg=colour238] '
set -g status-right '#[bg=colour238] '
set -g window-status-format " #W "
set -g window-status-current-format " #W "


# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# ==== Key bindings ====
# -T means; which "key table" is this binding for?
# The "root" key table is "all key presses"
# The "prefix" key table is "key presses after the prefix is pressed"
# The "copy-mode-vi" key table is "keys pressed while in copy-mode"
# NOTE: all the ^x keys are so I can just hold "Ctrl-Space" (or just Ctrl) and
# tap the relevant command, means I can trigger things on keydown rather than
# key up.
# -r means "May repeat"

# Use Ctrl-h/j/k/l to move between panes
# If the current pane has vim open, just pass the key press through normally and
# let vim handle it (so we can move between vim splits)
bind-key -T root 'C-h' if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -T root 'C-j' if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -T root 'C-k' if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -T root 'C-l' if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -T root 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# As an escape hatch: Allow <prefix>h/j/k/l to move between tmux panes
bind-key -T prefix -r  'h' select-pane -L
bind-key -T prefix -r '^h' select-pane -L
bind-key -T prefix -r  'j' select-pane -D
bind-key -T prefix -r '^j' select-pane -D
bind-key -T prefix -r  'k' select-pane -U
bind-key -T prefix -r '^k' select-pane -U
bind-key -T prefix -r  'l' select-pane -R
bind-key -T prefix -r '^l' select-pane -R

# Reload this config file with <prefix>r
bind-key -T prefix  'r' source-file ~/.tmux.conf
bind-key -T prefix '^r' source-file ~/.tmux.conf

# TODO: What are these doing?
#bind-key -T prefix  'S' command-prompt -p ssh: "new-window -n %1 'ssh %1'"
#bind-key -T prefix '^S' command-prompt -p ssh: "new-window -n %1 'ssh %1'"

# More sane splitting commands: The \ key for horizontal split, - for vertical.
bind-key -T prefix  '\' split-window -h -c "#{pane_current_path}"
bind-key -T prefix '^\' split-window -h -c "#{pane_current_path}"
bind-key -T prefix  '-' split-window -v -c "#{pane_current_path}"
# Holding ctrl and pressing - sends ^_ for some reason
bind-key -T prefix '^_' split-window -v -c "#{pane_current_path}"

# Looking for where we execute next-window or previous-window? We just rely on
# the default <leader>n / <leader>p, but instead of typing that every time, we
# setup our terminal emulator (Alacritty) to convert the keypresses of
# Cmd+Alt+Right / Cmd+Alt+Left to the correct code tmux understands.
# See: https://arslan.io/2018/02/05/gpu-accelerated-terminal-alacritty/#make-alacritty-feel-like-iterm2

# Create a new tab (actually a new tmux "window")
bind-key -T root ^t new-window -c "#{pane_current_path}" -n "new tab"

# Closing panes (and tabs) is done with ctrl-w, not ctrl-x (which is too easy to
# fat-finger when trying to do a Ctrl-c)
bind-key -T root ^w if-shell "$is_vim" "send-keys C-w"  "kill-pane"
unbind-key C-x

# TODO: What is this doing? Guess: It allows using Ctrl-6 to swap between recent
# buffers when vim is running inside tmux
unbind C-6

#set -g @resurrect-strategy-nvim 'session'
#set -g @resurrect-save-shell-history 'on'
#set -g @resurrect-capture-pane-contents 'on'
#
#set -g @plugin 'tmux-plugins/tmux-resurrect'
#
## Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
#run -b '~/.tmux/plugins/tpm/tpm'

# Enable 24 bit true colors
set -ga terminal-overrides ',*:RGB'

# Enable undercurl
set -sa terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# Enable undercurl colors
set -sa terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
