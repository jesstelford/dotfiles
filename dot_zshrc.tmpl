# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

if [[ -v ZSH_PROF ]]; then
  zmodload zsh/zprof
fi

fpath=( "$HOME/.zsh/site-functions" $fpath )
fpath=( "$HOME/.zsh_functions" $fpath )

# Enable auto complete
autoload -Uz compinit && compinit

[ -f $HOME/.zsh_aliases ] && source $HOME/.zsh_aliases

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

PY_USER_BIN=$(python -c 'import site; print(site.USER_BASE + "/bin")')
PY3_USER_BIN=$(python3 -c 'import site; print(site.USER_BASE + "/bin")')

if [ -d "$PY_USER_BIN" ] ; then
  export PATH="$PY_USER_BIN:$PATH"
fi

if [ -d "$PY3_USER_BIN" ] ; then
  export PATH="$PY3_USER_BIN:$PATH"
fi

if [ -d "$HOME/adb-fastboot/platform-tools" ] ; then
   export PATH="$HOME/adb-fastboot/platform-tools:$PATH"
fi

export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.yarn/bin:$PATH"
export PATH="$HOME/.config/yarn/global/node_modules/.bin:$PATH"
export PATH="/usr/local/opt/python/libexec/bin:$PATH"
export PATH="/usr/local/go/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"

export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!**/node_modules" --glob "!**/.git"'
# Use nvim for editing, falling back to vi if it can't be found
export VISUAL="$(command -v nvim 2>/dev/null || command -v vi)"
export EDITOR="$VISUAL"

export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD # For OSX ls?

# Nicer less defaults for our modern terminal
export LESS='--tabs=2 --chop-long-lines --RAW-CONTROL-CHARS --quit-if-one-screen --no-init'

{{- if .spin }}
{{- /* Can't use fnm in spin */}}
# Node version management with nvm
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# Automatically call nvm use
# From: https://github.com/nvm-sh/nvm#automatically-call-nvm-use
cdnvm() {
    command cd "$@";
    nvm_path=$(nvm_find_up .nvmrc | tr -d '\n')

    # If there are no .nvmrc file, use the default nvm version
    if [[ ! $nvm_path = *[^[:space:]]* ]]; then

        declare default_version;
        default_version=$(nvm version default);

        # If there is no default version, set it to `node`
        # This will use the latest version on your machine
        if [[ $default_version == "N/A" ]]; then
            nvm alias default node;
            default_version=$(nvm version default);
        fi

        # If the current version is not the default version, set it to use the default version
        if [[ $(nvm current) != "$default_version" ]]; then
            nvm use default;
        fi

    elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
        declare nvm_version
        nvm_version=$(<"$nvm_path"/.nvmrc)

        declare locally_resolved_nvm_version
        # `nvm ls` will check all locally-available versions
        # If there are multiple matching versions, take the latest one
        # Remove the `->` and `*` characters and spaces
        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
        locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

        # If it is not already installed, install it
        # `nvm install` will implicitly use the newly-installed version
        if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then
            nvm install "$nvm_version";
        elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
            nvm use "$nvm_version";
        fi
    fi
}
alias cd='cdnvm'
cd "$PWD"

{{- else }}
# Node version management with fnm
export PATH="$HOME/.fnm:$PATH"
# Output redirected to avoid complaints from powerlevel10k
eval "$(fnm env)" >/dev/null 2>&1

# Auto-switch node versions.
# From: https://github.com/Schniz/fnm/issues/144#issuecomment-734387810
FNM_USING_LOCAL_VERSION=0
autoload -U add-zsh-hook
_fnm_autoload_hook() {
	if [[ -f .nvmrc && -r .nvmrc || -f .node-version && -r .node-version ]]; then
		FNM_USING_LOCAL_VERSION=1
		fnm use --install-if-missing
	elif [ $FNM_USING_LOCAL_VERSION -eq 1 ]; then
		FNM_USING_LOCAL_VERSION=0
		fnm use default
	fi
}
# Output redirected to avoid complaints from powerlevel10k
add-zsh-hook chpwd _fnm_autoload_hook &&
	_fnm_autoload_hook >/dev/null 2>&1
# END: Auto-switch node versions.
{{- end }}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Get Alt-c working for FZF (NOTE: Can also Type ESC-c)
# From: https://github.com/junegunn/fzf/issues/164#issuecomment-581837757
bindkey "รง" fzf-cd-widget

[ -f ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ] && source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

[ -f ~/.zsh/powerlevel10k/powerlevel10k.zsh-theme ] && source ~/.zsh/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

{{- if (eq .chezmoi.os "darwin") }}
# Make homebrew available
[ -f /opt/homebrew/bin/brew ] && eval "$(/opt/homebrew/bin/brew shellenv)"
{{- end }}

# Added by serverless binary installer
export PATH="$HOME/.serverless/bin:$PATH"
